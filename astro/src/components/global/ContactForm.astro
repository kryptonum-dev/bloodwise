---
import { actions, getActionProps } from "astro:actions";
import { Icon } from "astro-icon/components";
import Markdown from "@/components/ui/markdown.astro";
import CopyToClipboard from "@/components/ui/CopyToClipboard.astro";
import Input from "@/components/ui/Input.astro";
import Button from "@/components/ui/Button.astro";
import Checkbox from "@/components/ui/Checkbox.astro";
import FormLoader from "@/components/ui/FormLoader.astro";
import FormState from "@/components/ui/FormState.astro";

export const ContactForm_Query = `
  heading,
  paragraph,
  emailSection {
    heading,
    email,
  },
`;

export type Props = {
  index: number;
  heading: string;
  paragraph: string;
  emailSection: {
    heading: string;
    email: string;
  };
};

const { index, heading, paragraph, emailSection } = Astro.props;
---

<section class='ContactForm' id='kontakt'>
  <header>
    <Markdown tag={index === 0 ? "h1" : "h2"}>{heading}</Markdown>
    <Markdown class='paragraph'>{paragraph}</Markdown>
    {
      emailSection && (
        <div class='group'>
          <Icon name='messages' size={28} />
          <div>
            <Markdown tag='h3'>{emailSection.heading}</Markdown>
            <p>
              <a href={`mailto:${emailSection.email}`}>{emailSection.email}</a>
              <CopyToClipboard copyData={emailSection.email} />
            </p>
          </div>
        </div>
      )
    }
  </header>
  <form method='post'>
    <input {...getActionProps(actions.contact)} />
    <Input name='name' label='Imię' inputProps={{ required: true, minlength: 1 }} />
    <Input name='email' label='E-mail' inputProps={{ required: true, type: "email" }} />
    <Input name='message' label='Wiadomość' isTextarea={true} inputProps={{ required: true }} />
    <Checkbox
      name='legal'
      label={`Akceptuję <a class='link' href='/polityka-prywatnosci' target='_blank' rel='noreferrer'>politykę prywatności</a>`}
      inputProps={{ required: true }}
    />
    <Button type='submit'>Skontaktuj się z nami</Button>
    <FormLoader />
    <FormState
      success={{
        heading: "Dziękujemy za wysłanie wiadomości!",
        paragraph: "Odpowiemy możliwie jak najszybciej.",
      }}
      error={{
        heading: "Nie udało się wysłać wiadomości",
        paragraph:
          "Coś poszło nie tak. Spróbuj ponownie. Jeśli problem się powtórzy, skontaktuj się z nami przez adres: <a href='mailto:contact@bloodwise.com.pl' class='link'>contact@bloodwise.com.pl</a>",
      }}
    />
  </form>
</section>

<style lang='scss'>
  .ContactForm {
    display: grid;
    align-items: flex-start;
    gap: 36px clamp(36px, calc(62vw / 7.68), 62px);
    @media (min-width: 900px) {
      grid-template-columns: 1.2fr 1fr;
    }
  }
  header {
    max-width: calc(465rem / 16);
    .paragraph {
      margin: clamp(12px, calc(20vw / 7.68), 20px) 0 clamp(24px, calc(32vw / 7.68), 32px);
    }
    .group {
      display: grid;
      grid-template-columns: auto 1fr;
      gap: 12px;
      h3 {
        margin-bottom: 4px;
      }
    }
  }
  form {
    max-width: calc(392rem / 16);
    display: grid;
    gap: 16px;
    position: relative;
    &:has([data-form-state] > :not([hidden])) {
      & > *:not([data-form-state]) {
        display: none;
      }
    }
    button {
      margin-top: 12px;
    }
  }
</style>

<script>
  import { actions, isInputError } from "astro:actions";
  import { handleError } from "@/components/ui/Error/handle-error";

  document.querySelectorAll<HTMLFormElement>(".ContactForm form").forEach(element => {
    const loader = element.querySelector<HTMLDivElement>("[data-form-loader]");
    const successState = element.querySelector<HTMLDivElement>("[data-form-state-success]");
    const errorState = element.querySelector<HTMLDivElement>("[data-form-state-error]");
    element.addEventListener("submit", async event => {
      event.preventDefault();
      loader.hidden = false;
      const formData = new FormData(element);
      const { data, error } = await actions.contact(formData);
      element.querySelectorAll<HTMLSpanElement>(`[data-error-name]`).forEach(error => handleError(error, ""));
      if (isInputError(error)) {
        for (const field in error.fields) {
          const message = error.fields[field][0];
          handleError(element.querySelector(`[data-error-name="${field}"]`), message);
        }
      } else {
        if (data?.success) {
          successState.hidden = false;
        } else {
          errorState.hidden = false;
        }
      }
      loader.hidden = true;
    });
  });
</script>
